datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Student {
  id                Int                      @id @default(autoincrement())
  clerkUserId       String                   @unique
  profile           StudentProfile?
  academic          AcademicInfo?
  additionalDetails AdditionalStudentDetails?
  guardianDetails   GuardianDetails?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  siblings           SiblingDetails[]
  hobbies            HobbyDetails[]
  technicalInterests TechnicalInterestDetails[]
}

model StudentProfile {
  id          Int      @id @default(autoincrement())
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   Int      @unique
  name        String
  email       String
  phone       String
  location    String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AcademicInfo {
  id              Int      @id @default(autoincrement())
  student         Student  @relation(fields: [studentId], references: [id])
  studentId       Int      @unique
  rollNumber      String   @unique
  currentSemester String
  section         String
  yearOfAdmission String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model AdditionalStudentDetails {
  id               Int      @id @default(autoincrement())
  student          Student  @relation(fields: [studentId], references: [id])
  studentId        Int      @unique
  aadharNo         String   @unique
  dob              DateTime
  bloodGroup       String
  addressOnAadhar  String
  permanentAddress String?
  casteCategory    String
  subcaste         String?
  religion         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model SiblingDetails {
  id                  Int      @id @default(autoincrement())
  student            Student  @relation(fields: [studentId], references: [id])
  studentId          Int
  name               String
  age                Int
  aadharNo           String   @db.VarChar(14)
  occupation         String
  organizationAddress String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model GuardianDetails {
  id                  Int      @id @default(autoincrement())
  student            Student  @relation(fields: [studentId], references: [id])
  studentId          Int      @unique
  fatherName         String
  fatherOccupation   String?
  fatherQualification String?
  fatherContact      String
  motherName         String
  motherOccupation   String?
  motherQualification String?
  motherContact      String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model HobbyDetails {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  hobby     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TechnicalInterestDetails {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  interest  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

