datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Student {
  id                Int                      @id @default(autoincrement())
  clerkUserId       String                   @unique
  profile           StudentProfile?
  academic          AcademicInfo?
  additionalDetails AdditionalStudentDetails?
  guardianDetails   GuardianDetails?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  siblings           SiblingDetails[]
  hobbies            HobbyDetails[]
  academicDetails   AcademicDetails[]    
  technicalInterests TechnicalInterestDetails[]
  scholarship       Scholarship?
  hostel           Hostel?
  scholarshipDetails ScholarshipDetails[]
  hostelDetails   HostelDetails[]
}

model StudentProfile {
  id          Int      @id @default(autoincrement())
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   Int      @unique
  name        String
  email       String
  phone       String
  location    String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AcademicInfo {
  id              Int      @id @default(autoincrement())
  student         Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId       Int      @unique
  college_id      String   @unique
  rollNumber      String   @unique
  currentSemester String
  section         String
  yearOfAdmission String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model AdditionalStudentDetails {
  id               Int      @id @default(autoincrement())
  student          Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId        Int      @unique
  aadharNo         String   @unique
  dob              DateTime
  bloodGroup       String?
  addressOnAadhar  String
  permanentAddress String?
  casteCategory    String
  subcaste         String?
  religion         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model SiblingDetails {
  id                  Int      @id @default(autoincrement())
  student            Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId          Int
  name               String
  age                Int
  aadharNo           String   @db.VarChar(14)
  occupation         String
  organizationAddress String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model GuardianDetails {
  id                  Int      @id @default(autoincrement())
  student            Student  @relation(fields: [studentId], references: [id], onDelete: Cascade  )
  studentId          Int      @unique
  fatherName         String
  fatherOccupation   String?
  fatherQualification String?
  fatherContact      String
  motherName         String
  motherOccupation   String?
  motherQualification String?
  motherContact      String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model HobbyDetails {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  hobby     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TechnicalInterestDetails {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  interest  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AcademicDetails {
  id         Int      @id @default(autoincrement())
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  Int
  label      String
  year       String
  totalMarks Int
  outOfMarks Int
  percentage String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([studentId, label])
}

model Scholarship {
  id           Int      @id @default(autoincrement())
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    Int      @unique
  hasScholarship Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Hostel {
  id         Int      @id @default(autoincrement())
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  Int      @unique
  isHosteler Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ScholarshipDetails {
  id           Int      @id @default(autoincrement())
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    Int
  year         String
  academicYear String
  type         String
  criteria     String
  amount       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([studentId, year])
}

model HostelDetails {
  id              Int      @id @default(autoincrement())
  student         Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId       Int
  year            String
  academicYear    String
  roomDetails     String
  partnerDetails  String
  transportation  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([studentId, year])
}

